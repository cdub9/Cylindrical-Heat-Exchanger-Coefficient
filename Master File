import numpy as np
import sys

#Load arrays for Table 7.2, 7.4, and conditions

T72=np.loadtxt("Table 7.2",delimiter=",")
T74=np.loadtxt("Table 7.4",delimiter=",")

#Inputs from user
correct=False
while not (correct):
    corr_type=input('What is the geometry of the correlation? e.g. cylinder: ')
    if corr_type == "cylinder":
        D=float(input("Enter the diameter of the tube (m): "))
        V=float(input("Enter the velocity of the fluid (m/s): "))
        nu=float(input("Enter the kinematic viscosity constant (m^2/s): "))
        Pr=float(input("Enter the Prandtl number: "))
        k=float(input("Enter thermal conductivity (W/m*K): "))
        correct=True
    else:
        print("You've entered an invalid correlation. This program is terminating.")
        sys.exit()

#Determine appropriate correlation(s) from conditions

#Correlation 7.52

Re_D=(V*D)/nu
print(Re_D)

for i in range(len(T72)):
    if Re_D > T72[i,0] and Re_D < T72[i,1]:
        C = float(T72[i,2])
        m = float(T72[i,3])
        Nu_D = C * Re_D**m * Pr**(1/3)
        h1 = Nu_D*k/D
        print("Correlation 7.52 fits and h = %9.5f " %h1 + " W/M^2*K")
        
print(C)
print(m)
print(Nu_D)
print(h1)

#Correlation 7.53

Re_D=(V*D)/nu
print(Re_D)

for i in range(len(T74)):
    if Re_D > T74[i,0] and Re_D < T74[i,1]:
        C = float(T74[i,2])
        m = float(T74[i,3])
        Pr_s = float(input("What is the value of Pr_s?: "))
        if Pr < 10:
            n = .37
        elif Pr < 10:
            n = .36
        Nu_D = C * Re_D**m * Pr**n * (Pr/Pr_s)**(1/4)
        h2 = Nu_D*k/D
        print("Correlation 7.53 fits and h = %9.5f " %h2 + " W/M^2*K")
        
print(C)
print(m)
print(Nu_D)
print(h2)

#Correlation 7.54

Pr=float(input("Enter the Prandtl number evaluated at Tf: "))
nu=float(input("Enter the kinematic viscosity constant evaluated at Tf (m^2/s): "))
k=float(input("Enter thermal conductivity evaluated at Tf (W/m*K): "))

Re_D=(V*D)/nu
print(Re_D)

if Re_D >= .2 and Pr >= .2:
    Nu_D = 0.3 + (0.62 * Re_D**(1/2) * Pr**(1/3)) * (( 1 + (0.4 / Pr)**(2/3))**(-1/4)) * (1 + (Re_D / 282000)**(5/8))**(4/5)
    h3 = Nu_D*k/D
    print("Correlation 7.54 fits and h = %9.5f " %h3 + " W/M^2*K")
                  
print(C)
print(m)
print(Nu_D)
print(h3)


#Here is what I've done so far to add classes

class Correlation:
    def __init__(self,name,geometry):
        self.name = name
        self.geometry = geometry
        self.conditions = []
        
    def addConditions(self,condition):
        self.conditions.append(condition)
        

c52 = Correlation('7.52','cylinder')
c53 = Correlation('7.53','cylinder')
c54 = Correlation('7.54','cylinder')

c52.addConditions(T72)
c53.addConditions(T74)

print (c53.conditions[2,2])
