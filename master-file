# This is the master file

import numpy as np
import sys

# Inputs for variables (This is just a high level outline of the code right now)

units = input("Will you be entering values in AES or SI units? ")

Tci = input("Please enter the temperature of the cold input: ")
Thi = input("Please enter the temperature of the hot input: ")

mdotc = input("Please enter the mass flow rate of the colder fluid: ")
mdoth = input("Please enter the mass flow rate of the hotter fluid: ")

U = input("Please enter the overall heat transfer coefficient: ")

# User must choose to supply Tco or Tho
choices = {'cold': 'Tco', 'hot': 'Tho'}
choose_output = input("Will you be providing the temperature of the cold output (cold) or hot output (hot)?")
if choose_output in choices:
    the_output = choices[choose_output]
    if the_output == 'Tco':
        Tco = input("Please enter the temperature of the cold output: ")
    elif the_output == 'Tho':
        Tho = input("Please enter the temperature of the hot output: ")
else:
    print("You did not select a valid output. This program is terminating.")
    sys.exit()

# Allow the user to select from water, 1,1,1,2-Tetraflouroethane, ethanol or 2,2,4-trimethylpentane
fluidc = input("Please enter the fluid type for the cold input: ")
fluidh = input("Please enter the fluid type for the hot input: ")

heat_capacity_constants = np.array([[276370,-2090.10,8.13,-0.01,0],[651080,-9505.70,62.84,-0.18,0],[102640,-139.63,-0.03,0,0],[0,696.7,-1.38,0,0]])

cpc = A + B * Tci + C * Tci**2 + D * Tci**3 + E * Tci**4
cph = A + B * Thi + C * Thi**2 + D * Thi**3 + E * Thi**4

# If Tho is not provided by the user then use this formula to calculate it
Tho = ((mdotc * cpc * (Tco - Tci)) / (mdoth * cph)) + Thi
Tco = ((mdoth * cph * (Thi - Tho)) / (mdotc * cpc)) + Tci


#Kyler's code

#Import packages
import numpy as np
import sys
from scipy.optimize import fsolve
import math

'''
define conversion functions
load thermophysical properties into array
'''

def convert_inT_ci(inT_ci):
    T_ci=inT_ci/1.8
    return T_ci
def convert_inT_hi(inT_hi):
    T_hi=inT_hi/1.8
    return T_hi
def convert_inM_c(inM_c):
    M_c=inM_c*.45359
    return M_c
def convert_inM_h(inM_h):
    M_h=inM_h*.45359
    return M_h
def convert_inU(inU):
    U=inU*1055/.092903*9/5
    return U


Water_array=np.array([18.01528,273.15,373.15,2.7637E+05,-2.0901E+03,8.1250E+00,-1.4116E-02,9.3701E-06])
R134a_array=np.array([102.03089,172.00,247.08,6.5108E+05,-9.5057E+03,6.2835E+01,-1.8264E-01,2.0031E-04])
Ethanol_array=np.array([46.06844,159.05,351.44,1.0264E+05,-1.3963E+02,-3.0341E-02,2.0386E-03,0.0000E+00])
trimethylpentane_array=np.array([114.22852,165.777,372.388,9.5275E+04,6.9670E+02,-1.3765E+00,2.1734E-03,0.0000E+00])

'''
choose fluids
choose AES or SI units
input values
convert AES to SI if necessary
check for correct temperature inputs
'''
correct=False
while not (correct):
    cfluid_type=input('Enter fluid type in cold stream \
(Water, R134a, Ethanol, 2,2,4-trimethylpentane: ')
    if cfluid_type == "Water":
        cmolecular_weight=Water_array[0] #g/mol
        cmelting_point=Water_array[1] #K
        cboiling_point=Water_array[2] #K
        Ac=Water_array[3]
        Bc=Water_array[4]
        Cc=Water_array[5]
        Dc=Water_array[6]
        Ec=Water_array[7]
        correct=True
    elif cfluid_type == "R134a":
        cmolecular_weight=R134a_array[0] #g/mol
        cmelting_point=R134a_array[1] #K
        cboiling_point=R134a_array[2] #K
        Ac=R134a_array[3]
        Bc=R134a_array[4]
        Cc=R134a_array[5]
        Dc=R134a_array[6]
        Ec=R134a_array[7]
        correct=True
    elif cfluid_type == "Ethanol":
        cmolecular_weight=Ethanol_array[0] #g/mol
        cmelting_point=Ethanol_array[1] #K
        cboiling_point=Ethanol_array[2] #K
        Ac=Ethanol_array[3]
        Bc=Ethanol_array[4]
        Cc=Ethanol_array[5]
        Dc=Ethanol_array[6]
        Ec=Ethanol_array[7]
        correct=True
    elif cfluid_type == "2,2,4-trimethylpentane":
        cmolecular_weight=trimethylpentane_array[0] #g/mol
        cmelting_point=trimethylpentane_array[1] #K
        cboiling_point=trimethylpentane_array[2] #K
        Ac=trimethylpentane_array[3]
        Bc=trimethylpentane_array[4]
        Cc=trimethylpentane_array[5]
        Dc=trimethylpentane_array[6]
        Ec=trimethylpentane_array[7]
        correct=True        
    else:
        print("Incorrect entry for fluid type, ending program")
        sys.exit()

correct=False
while not (correct):
    hfluid_type=input('Enter fluid type in hot stream \
(Water, R134a, Ethanol, 2,2,4-trimethylpentane: ')
    if hfluid_type == "Water":
        hmolecular_weight=Water_array[0] #g/mol
        hmelting_point=Water_array[1] #K
        hboiling_point=Water_array[2] #K
        Ah=Water_array[3]
        Bh=Water_array[4]
        Ch=Water_array[5]
        Dh=Water_array[6]
        Eh=Water_array[7]
        correct=True
    elif hfluid_type == "R134a":
        hmolecular_weight=R134a_array[0] #g/mol
        hmelting_point=R134a_array[1] #K
        hboiling_point=R134a_array[2] #K
        Ah=R134a_array[3]
        Bh=R134a_array[4]
        Ch=R134a_array[5]
        Dh=R134a_array[6]
        Eh=R134a_array[7]
        correct=True
    elif hfluid_type == "Ethanol":
        hmolecular_weight=Ethanol_array[0] #g/mol
        hmelting_point=Ethanol_array[1] #K
        hboiling_point=Ethanol_array[2] #K
        Ah=Ethanol_array[3]
        Bh=Ethanol_array[4]
        Ch=Ethanol_array[5]
        Dh=Ethanol_array[6]
        Eh=Ethanol_array[7]
        correct=True
    elif hfluid_type == "2,2,4-trimethylpentane":
        hmolecular_weight=trimethylpentane_array[0] #g/mol
        hmelting_point=trimethylpentane_array[1] #K
        hboiling_point=trimethylpentane_array[2] #K
        Ah=trimethylpentane_array[3]
        Bh=trimethylpentane_array[4]
        Ch=trimethylpentane_array[5]
        Dh=trimethylpentane_array[6]
        Eh=trimethylpentane_array[7]
        correct=True
    else:
        print("Incorrect entry for fluid type, ending program")
        sys.exit()
        
correct=False
while not (correct):
    units=input('Enter units in AES or SI?: ')
    if units == "AES":
        inT_ci=float(input("What is the colder fluid input temperature? (R): "))
        inT_hi=float(input("What is the hotter fluid input temperature? (R): "))
        inM_c=float(input('What is the mass flow rate of the colder fluid? (lbm/sec): '))
        if inM_c < 0:
            print("Variables have an error, mass flow rate is negative, ending program")
            sys.exit()
        inM_h=float(input('What is the mass flow rate of the hotter fluid? (lbm/sec): '))
        if inM_h < 0:
            print("Variables have an error, mass flow rate is negative, ending program")
            sys.exit()
        inU=float(input('What is the Overall Heat Transfer Coefficient? (BTU/s*ft^2*R): '))
        if inU < 0:
            print("Variables have an error, U is negative, ending program")
            sys.exit()
        output_flow=input('Enter weather cold (T_co) or hot (T_ho) output temperature will be specified: ')
        if output_flow == "T_co":
            T_out=float(input("What is the " + cfluid_type + " output temperature? (R)"))
        elif output_flow == "T_ho":
            T_out=float(input("What is the " + hfluid_type + " output temperature? (R)"))
        else:
            print("Output stream not specified, ending program")
            sys.exit()
        correct=True
    elif units == "SI":
        inT_ci=float(input("What is the colder fluid input temperature? (K): "))
        inT_hi=float(input("What is the hotter fluid input temperature? (K): "))
        inM_c=float(input('What is the mass flow rate of the colder fluid? (kg/sec): '))
        if inM_c < 0:
            print("Variables have an error, mass flow rate is negative, ending program")
            sys.exit()
        inM_h=float(input('What is the mass flow rate of the hotter fluid? (kg/sec): '))
        if inM_h < 0:
            print("Variables have an error, mass flow rate is negative, ending program")
            sys.exit()
        inU=float(input('What is the Overall Heat Transfer Coefficient?: (J/s*m^2*K)'))
        if inU < 0:
            print("Variables have an error, U is negative, ending program")
            sys.exit()
        output_flow=input('Enter weather cold (T_co) or hot (T_ho) output temperature will be specified: ')
        if output_flow == "T_co":
            T_out=float(input("What is the " + cfluid_type + " output temperature? (K): "))
        elif output_flow == "T_ho":
            T_out=float(input("What is the " + hfluid_type + " output temperature? (K): "))
        else:
            print("Output stream not specified, ending program")
            sys.exit()
        correct=True
        
if units == "AES":
    T_ci=convert_inT_ci(inT_ci)
    T_hi=convert_inT_hi(inT_hi)
    M_c=convert_inM_c(inM_c)
    M_h=convert_inM_h(inM_h)
    U=convert_inU(inU)
else:
    T_ci=inT_ci
    T_hi=inT_hi
    M_c=inM_c
    M_h=inM_h
    U=inU

if T_ci < cmelting_point or T_out > cboiling_point:
    print("Invalid cold stream input temperature, ending program")
    sys.exit()
if T_hi < hmelting_point or T_out > hboiling_point:
    print("Invalid hot stream input temperature, ending program")
    sys.exit()
if output_flow == "T_co":
    if T_out < cmelting_point or T_out > cboiling_point:
        print("Invalid cold stream output temperature,ending program")
        sys.exit()
elif output_flow == "T_ho":
    if T_out < hmelting_point or T_out > hboiling_point:
        print("Invalid hot stream output temperature,ending program")
        sys.exit()
        
'''
Calculate unspecified temp (T_ho or T_co)
Calculate average temperature of fluid
Calculate heat capacity of fluid   J/kmol*K

'''
if output_flow == "T_co":
    def Q(T_ho):
        residual=(M_h*(Ah+Bh*T_h+Ch*T_h**2+Dh*T_h**3+Eh*T_h**4)*(T_hi-T_ho))\
        -(M_c*(Ac+Bc*T_c+Cc*T_c**2+Dc*T_c**3+Ec*T_c**4)*(T_out-T_ci))
        return residual
    z=fsolve(Q,200)
    T_ho = z
    T_h=(T_hi+T_ho)/2
    T_c=(T_ci+T_out)/2
    C_pc=Ac+Bc*T_c+Cc*T_c**2+Dc*T_c**3+Ec*T_c**4
    C_ph=Ah+Bh*T_h+Ch*T_h**2+Dh*T_h**3+Eh*T_h**4
elif output_flow == "T_ho":
    def Q(T_co):
        residual=(M_h*(A+B*T_h+C*T_h**2+D*T_h**3+E*T_h**4)*(T_hi-T_out))\
        -(M_c*(A+B*T_c+C*T_c**2+D*T_c**3+E*T_c**4)*(T_co-T_ci))
        return residual
    z=fsolve(Q,200)
    T_co = z
    T_h=(T_hi+T_out)/2
    T_c=(T_ci+T_co)/2
    C_pc=Ac+Bc*T_c+Cc*T_c**2+Dc*T_c**3+Ec*T_c**4
    C_ph=Ah+Bh*T_h+Ch*T_h**2+Dh*T_h**3+Eh*T_h**4
    
'''
Calculate heat from first two equations, in Watts
'''
if output_flow == "T_co":
    qh=M_h*(C_ph/hmolecular_weight)*(T_hi-T_ho)
    qc=M_c*(C_pc/cmolecular_weight)*(T_out-T_ci)
elif output_flow == "T_ho":
    qh=M_h*(C_ph/hmolecular_weight)*(T_hi-T_out)
    qc=M_c*(C_pc/cmolecular_weight)*(T_co-T_ci)
    
'''
Calculate delta T_1, delta T_2, R, P
'''
if output_flow == "T_co":
    dT_1=T_hi-T_out
    dT_2=T_ho-T_ci
    R=(T_hi-T_ho)/(T_out-T_ci)
    P=(T_out-T_ci)/(T_hi-T_ci)
elif output_flow == "T_ho":
    dT_1=T_hi-T_co
    dT_2=T_out-T_ci
    R=(T_hi-T_out)/(T_co-T_ci)
    P=(T_co-T_ci)/(T_hi-T_ci)

'''
Calculate delta T_lm, F
'''
dT_lm=(dT_2-dT_1)/np.log(dT_2/dT_1)
F=(math.sqrt(R**2+1)/(R-1))*(np.log((1-P)/(1-P*R))/np.log((2-P*(R+1-math.sqrt(R**2+1)))/\
(2-P*(R+1+math.sqrt(R**2+1)))))

'''
Calculate surface area (A) in m^2
'''
A1=qh/(F*U*dT_lm)
A2=qc/(F*U*dT_lm)
print(A1,A2)

'''
Calculate cost in $
'''
cost=float(A1*1000)

'''
Display A, cost, calculated output temperature
'''
print ("The unspecified outlet temperature is: %5.3f " % T_ho + "K")
print ("The required surface area for the heat exchanger is: %5.3f " % A1 + "m^2")
print ("The cost for the heat exchanger is: $ %9.2f " % cost)
